{
    "patches": [
        {
            "label": "2025-09-23_14-36-08",
            "content": "@@ -1,1488 +0,0 @@\n-class Towel:%0A    def __init__(self, color: str, size: str): # construtor%0A        self.color: str = color # atributos%0A        self.size: str = size%0A        self.wetness: int = 0%0A    %0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha saturada, ensopada, pingando%22)%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22: # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0 # default return%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Color:%7Bself.color%7D, Size:%7Bself.size%7D, Wet:%7Bself.wetness%7D%22%0A%0Adef main(): %0A    towel: Towel = Towel(%22%22, %22%22) # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22dry%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22show%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain() %0A\n",
            "lines": "0"
        },
        {
            "label": "2025-09-23_14-43-32",
            "content": "@@ -52,16 +52,29 @@\n e: str):\n+ # construtor\n %0A       \n@@ -97,16 +97,28 @@\n  = color\n+ # atributos\n %0A       \n@@ -187,34 +187,38 @@\n def \n-getMaxWetness(self\n+dry(self, amount: int\n ) -%3E \n-int\n+None\n :%0A  \n@@ -227,250 +227,89 @@\n     \n-if \n self.\n-size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A\n+wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A  \n         \n if s\n@@ -296,34 +296,33 @@\n ss():%0A          \n-if\n+ \n  self.wetness %3E \n@@ -323,18 +323,17 @@\n ess \n-%3E\n+=\n  self.\n-get\n+is\n MaxW\n@@ -332,33 +332,32 @@\n f.isMaxWetness()\n-:\n %0A            pri\n@@ -371,25 +371,64 @@\n lha \n-encharcada\n+saturada, ensopada, pingando\n %22)%0A\n+%0A\n     \n+def wringOut(self):%0A\n     \n@@ -450,123 +450,139 @@\n s = \n-self.getMaxWetness()\n+0%0A%0A    def isMaxWetness(self) -%3E int:\n %0A    \n-%0A\n     \n-def wringOut(self) -%3E None:%0A        self.wetness = \n+if self.size == %22P%22: # early return%0A            return 1\n 0%0A    \n-%0A\n     \n-def isDry(self) -%3E bool\n+if self.size == %22M%22\n :%0A  \n@@ -591,120 +591,106 @@\n     \n+ \n+   \n return \n-self.wetness == 0%0A%0A%0A    def show(self) -%3E None:%0A        print(f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22)\n+20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0 # default return\n %0A%0A  \n@@ -716,16 +716,27 @@\n  -%3E str:\n+ # toString\n %0A       \n@@ -745,16 +745,22 @@\n eturn f%22\n+Color:\n %7Bself.co\n@@ -763,17 +763,23 @@\n f.color%7D\n- \n+, Size:\n %7Bself.si\n@@ -781,17 +781,22 @@\n lf.size%7D\n- \n+, Wet:\n %7Bself.we\n@@ -803,20 +803,16 @@\n tness%7D%22%0A\n-    \n %0Adef mai\n@@ -815,16 +815,17 @@\n  main():\n+ \n %0A    tow\n@@ -818,32 +818,39 @@\n in(): %0A    towel\n+: Towel\n  = Towel(%22%22, %22%22)\n@@ -853,24 +853,82 @@\n  %22%22)\n-%0A    while True:\n+ # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito\n %0A%0A  \n@@ -953,16 +953,41 @@\n input() \n+# 4: perguntar ao usuario\n %0A       \n@@ -1021,16 +1021,39 @@\n it(%22 %22) \n+# 5: separar argumentos\n %0A%0A      \n@@ -1123,16 +1123,29 @@\n = %22new%22:\n+ # color size\n %0A       \n@@ -1411,16 +1411,26 @@\n    else:\n+ # 7: erro\n %0A       \n@@ -1468,12 +1468,21 @@\n ncontrado%22)%0A\n+%0Amain() %0A\n",
            "lines": "49"
        },
        {
            "label": "2025-10-01_11-19-06",
            "content": "@@ -162,38 +162,34 @@\n def \n-dry(self, amount: int\n+getMaxWetness(self\n ) -%3E \n-None\n+int\n :%0A  \n@@ -198,89 +198,250 @@\n     \n+if \n self.\n-wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A  \n+size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A\n         \n   se\n@@ -432,25 +432,26 @@\n unt%0A        \n- \n+if\n  self.wetnes\n@@ -456,17 +456,18 @@\n ess \n-=\n+%3E\n  self.\n-is\n+get\n MaxW\n@@ -474,16 +474,17 @@\n etness()\n+:\n %0A       \n@@ -519,63 +519,60 @@\n a%22)%0A\n-%0A\n     \n-def isDry(self):%0A        return self.wetness == 0%0A\n+        self.wetness = self.getMaxWetness()%0A    \n %0A   \n@@ -590,16 +590,24 @@\n ut(self)\n+ -%3E None\n :%0A      \n@@ -625,16 +625,20 @@\n ess = 0%0A\n+    \n %0A    def\n@@ -644,202 +644,147 @@\n f is\n-MaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0\n+Dry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A%0A    def show(self) -%3E None:%0A        print(f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22)\n %0A%0A  \n@@ -832,13 +832,8 @@\n n f%22\n-Cor: \n %7Bsel\n@@ -844,18 +844,8 @@\n lor%7D\n-, Tamanho:\n  %7Bse\n@@ -856,18 +856,8 @@\n ize%7D\n-, Umidade:\n  %7Bse\n@@ -869,16 +869,20 @@\n tness%7D%22%0A\n+    \n %0Adef mai\n@@ -885,17 +885,16 @@\n  main():\n- \n %0A    tow\n@@ -899,15 +899,8 @@\n owel\n-: Towel\n  = T\n@@ -960,34 +960,9 @@\n ut()\n-%0A        print(%22$%22 + line)\n+ \n %0A   \n@@ -999,16 +999,17 @@\n lit(%22 %22)\n+ \n %0A%0A      \n@@ -1078,13 +1078,11 @@\n == %22\n-criar\n+new\n %22:%0A \n@@ -1213,163 +1213,11 @@\n == %22\n-seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        elif args%5B0%5D == %22enxugar\n+dry\n %22:%0A \n@@ -1313,15 +1313,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n@@ -1409,11 +1409,4 @@\n o%22)%0A\n-%0Amain()\n",
            "lines": "54"
        },
        {
            "label": "2025-10-01_11-29-24",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):\n        self.color: str = color\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def __str__(self) -> str:\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\")\n    while True:\n\n        line: str = input()\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\":\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else:\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain()",
            "lines": "57"
        }
    ]
}